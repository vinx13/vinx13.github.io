<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>GSoC on Wuwei Lin</title>
    <link>http://wuwei.io/tags/gsoc/</link>
    <description>Recent content in GSoC on Wuwei Lin</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 03 Aug 2018 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="http://wuwei.io/tags/gsoc/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>GSoC&#39;18: Final Review</title>
      <link>http://wuwei.io/post/2018/08/gsoc18-final-review/</link>
      <pubDate>Fri, 03 Aug 2018 00:00:00 +0000</pubDate>
      
      <guid>http://wuwei.io/post/2018/08/gsoc18-final-review/</guid>
      <description>We are near the end of GSoC this year. It has been a really successful and exciting summer. New features have been added to Shogun. Besides, we have get lots of old things cleaned up and improved. This post is the final review of the project.
My work during this summer mainly has two parts: immutable features and untemplated linalg. The former one is consisted of a series of refactor and redesign towards immutable features, including transformer and pipeline, dropping non-const methods from features.</description>
    </item>
    
    <item>
      <title>GSoC&#39;18: Summary Page</title>
      <link>http://wuwei.io/post/2018/08/gsoc18-summary-page/</link>
      <pubDate>Fri, 03 Aug 2018 00:00:00 +0000</pubDate>
      
      <guid>http://wuwei.io/post/2018/08/gsoc18-summary-page/</guid>
      <description>This is summary of the Google Summer of Code Project with Shogun.
Pull Requests Transformer #4285 #4326 #4339 #4348 #4367
Pipeline #4317 #4377
Variant #4290 #4295
Immutable Features #4316 #4339 #4352 #4365 #4376
Features and Labels View #4352
Custom Exception #4331
Notebook #4269 #4273 #4292 #4302
Cookbook #4323 #4338 #4366 #4380 #4390
Meta Examples #4318 #4325 #4336 #4338 #4349 #4361
Features Factory #4345 #4375
Demo of Untemplated Linalg GitHub repo</description>
    </item>
    
    <item>
      <title>Bringing features and labels views to Shogun</title>
      <link>http://wuwei.io/post/2018/07/bringing-features-and-labels-views-to-shogun/</link>
      <pubDate>Sat, 28 Jul 2018 00:00:00 +0000</pubDate>
      
      <guid>http://wuwei.io/post/2018/07/bringing-features-and-labels-views-to-shogun/</guid>
      <description>This week I&amp;rsquo;m happy to introduce the new thing to Shogun, features and labels view. In machine learning, operating on a subset of features or labels is usual, especially in recursive tree algorithms. The view, is a new instance of CFeatures or CLabels, or their subclasses, with a subset of data shared with the original instance. It is implemented as a global template function that accept a pointer or a small pointer to a viewable instance, and an index vector as arguments.</description>
    </item>
    
    <item>
      <title>Lazy Evaluation with Expression Templates (2)</title>
      <link>http://wuwei.io/post/2018/07/lazy-evaluation-with-expression-templates-2/</link>
      <pubDate>Thu, 05 Jul 2018 00:00:00 +0000</pubDate>
      
      <guid>http://wuwei.io/post/2018/07/lazy-evaluation-with-expression-templates-2/</guid>
      <description>Progress so far
Previously we have implemented lazy expressions using expression template. With expression APIs, we could seamlessly use expressions as vector and matrix. For example,
Vector a, b; auto c = add(a, b); Vector d = add(a, c);  In this example we create a addition expression of a and b, and then call add with an expression and a vector. In the second add expression, the argument c, which is a Vector, will be converted to a VectorRefExp.</description>
    </item>
    
    <item>
      <title>Lazy Evaluation with Expression Templates (1)</title>
      <link>http://wuwei.io/post/2018/06/lazy-evaluation-with-expression-templates-1/</link>
      <pubDate>Tue, 26 Jun 2018 00:00:00 +0000</pubDate>
      
      <guid>http://wuwei.io/post/2018/06/lazy-evaluation-with-expression-templates-1/</guid>
      <description>In last post I talked about the ongoing refactor of linalg. So we are going to have untemplated vector and matrix types, using a void pointer and checking type information in runtime. Say you have some vectors and do some computations like
Vector a, b, c; c = add(add(a, b), c);  A simple idea is to switch over element types of vectors and call templated routine linalg::add&amp;lt;T&amp;gt;. In this way we will have to switch every time, over each expression involved, e.</description>
    </item>
    
    <item>
      <title>Some thoughts on linalg</title>
      <link>http://wuwei.io/post/2018/06/some-thoughts-on-linalg/</link>
      <pubDate>Fri, 08 Jun 2018 00:00:00 +0000</pubDate>
      
      <guid>http://wuwei.io/post/2018/06/some-thoughts-on-linalg/</guid>
      <description>So in the next two weeks I&amp;rsquo;m going to work on refactoring linalg of Shogun. The data types in Shogun, SGVector&amp;lt;T&amp;gt;, SGMatrix&amp;lt;T&amp;gt; are templated classes which maintain a piece of memory in either CPU or GPU and provide basic operations like array-like element access. linalg::, is the upper level module working with SGVector, SGMatrix, providing linalg algebra operations, like matrix additions / multiplications.
Though SGVector and SGMatrix, as template classes, are capable to represent different data types (float32_t, float64_t, etc.</description>
    </item>
    
    <item>
      <title>New Transformers in Shogun</title>
      <link>http://wuwei.io/post/2018/05/new-transformers-in-shogun/</link>
      <pubDate>Sun, 27 May 2018 00:00:00 +0000</pubDate>
      
      <guid>http://wuwei.io/post/2018/05/new-transformers-in-shogun/</guid>
      <description>The first two weeks of GSoC have ended. Here I will share my progress so far.
In the first two weeks, I have been mostly working on the new transformer class, CTransformer. It is introduced mainly for two purposes: 1) Providing generic and unified interface for data transformation. 2) Make features immutable.
In Shogun, we have preprocessors and converters, both operating on features and applying some transformations. The major distinction between them I think is that preprocessors support on-the-fly evaluation: we can add several preprocessors by add_preprocessor and then apply them when calling get_feature_vector.</description>
    </item>
    
    <item>
      <title>GSoC&#39;18: Overview</title>
      <link>http://wuwei.io/post/2018/05/gsoc18-overview/</link>
      <pubDate>Sat, 05 May 2018 00:00:00 +0000</pubDate>
      
      <guid>http://wuwei.io/post/2018/05/gsoc18-overview/</guid>
      <description>Projects of GSoC&amp;rsquo;18 were announced last week and I am happy that I will be working on Shogun over this summer. In this post, I am pleased to share some details of my project.
Shogun is a versatile machine learning toolbox that offers a bunch of convinent and unified algorithm implementations. Written in C++ and providing interface in different languages via SWIG, it is a great place to hack.
My project, Continuous Detoxification, will focus on redesigning and refactoring, aiming at modernizing Shogun&amp;rsquo;s codebase and improving experience for both users and developers.</description>
    </item>
    
  </channel>
</rss>