<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>GSoC on Wuwei Lin</title>
    <link>http://wuwei.io/tags/gsoc/</link>
    <description>Recent content in GSoC on Wuwei Lin</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 15 Aug 2018 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://wuwei.io/tags/gsoc/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>GSoC&#39;18: Peer Review for Inside the Black Box</title>
      <link>http://wuwei.io/post/2018/08/gsoc18-peer-review-for-inside-the-black-box/</link>
      <pubDate>Wed, 15 Aug 2018 00:00:00 +0000</pubDate>
      <guid>http://wuwei.io/post/2018/08/gsoc18-peer-review-for-inside-the-black-box/</guid>
      <description>&lt;p&gt;This is my review for Shubhamâ€™s project, Inside the Black Box (&lt;a href=&#34;https://summerofcode.withgoogle.com/projects/6010966421012480&#34;&gt;project page&lt;/a&gt;, &lt;a href=&#34;https://shubham808.github.io/blog/gsoc&#39;18/Final-Report&#34;&gt;final report&lt;/a&gt;) this summer.&#xA;His work covers some important topics about user experience and internal implementation of Shogun.&lt;/p&gt;&#xA;&lt;h4 id=&#34;main-idea&#34;&gt;Main Idea&lt;/h4&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/shogun-toolbox/shogun/blob/develop/src/shogun/lib/StoppableSGObject.h&#34;&gt;&lt;code&gt;StoppableSGObject&lt;/code&gt;&lt;/a&gt; extends the premature stopping machine last year.&#xA;The macro &lt;a href=&#34;https://github.com/shogun-toolbox/shogun/blob/41888fe7c8dc3797063d674f452e13351f321338/src/shogun/lib/StoppableSGObject.h#L18&#34;&gt;&lt;code&gt;COMPUTATIONS_CONTROLLERS&lt;/code&gt;&lt;/a&gt; makes it possible to respond to &lt;a href=&#34;https://github.com/shogun-toolbox/shogun/blob/41888fe7c8dc3797063d674f452e13351f321338/src/shogun/lib/StoppableSGObject.cpp#L24&#34;&gt;signals&lt;/a&gt; during training.&#xA;This a helpful since we user can interrupt the training and then possibly resume. Moving these things to the base class &lt;code&gt;StoppableSGObject&lt;/code&gt; makes &lt;code&gt;CMachine&lt;/code&gt; class much cleaner.&#xA;The new macro &lt;code&gt;SG_PROGRESS&lt;/code&gt; is very nice. It makes progress bar more informative while requires few &lt;a href=&#34;https://github.com/shogun-toolbox/shogun/pull/4305/files&#34;&gt;changes&lt;/a&gt;.&#xA;To add a prefix like &lt;code&gt;class_name::method_name&lt;/code&gt; to the progress bar, we only need to replace &lt;code&gt;progress&lt;/code&gt; with the macro &lt;code&gt;SG_PROGRESS&lt;/code&gt;.&lt;/p&gt;</description>
    </item>
    <item>
      <title>GSoC&#39;18: Final Review</title>
      <link>http://wuwei.io/post/2018/08/gsoc18-final-review/</link>
      <pubDate>Fri, 03 Aug 2018 00:00:00 +0000</pubDate>
      <guid>http://wuwei.io/post/2018/08/gsoc18-final-review/</guid>
      <description>&lt;!-- raw HTML omitted --&gt;&#xA;&lt;p&gt;We are near the end of GSoC this year.&#xA;It has been a really successful and exciting summer.&#xA;New features have been added to Shogun.&#xA;Besides, we have get lots of old things cleaned up and improved.&#xA;This post is the final review of the project.&lt;/p&gt;&#xA;&lt;p&gt;My work during this summer mainly has two parts: immutable features and untemplated linalg. The former one is consisted of a series of refactor and redesign towards immutable features, including transformer and pipeline, dropping non-const methods from features. The topic about untemplated linalg is to drop the type argument &lt;code&gt;T&lt;/code&gt; from &lt;code&gt;SGMatrix&amp;lt;T&amp;gt;&lt;/code&gt; and &lt;code&gt;SGVector&amp;lt;T&amp;gt;&lt;/code&gt; and put the type information in runtime.&lt;/p&gt;</description>
    </item>
    <item>
      <title>GSoC&#39;18: Summary Page</title>
      <link>http://wuwei.io/post/2018/08/gsoc18-summary-page/</link>
      <pubDate>Fri, 03 Aug 2018 00:00:00 +0000</pubDate>
      <guid>http://wuwei.io/post/2018/08/gsoc18-summary-page/</guid>
      <description>&lt;p&gt;This is summary of the &lt;a href=&#34;https://summerofcode.withgoogle.com/projects/#6031654070517760&#34;&gt;Google Summer of Code Project&lt;/a&gt; with &lt;a href=&#34;http://shogun.ml&#34;&gt;Shogun&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;h3 id=&#34;pull-requests&#34;&gt;Pull Requests&lt;/h3&gt;&#xA;&lt;p&gt;&lt;strong&gt;Transformer&lt;/strong&gt;&#xA;&lt;a href=&#34;https://github.com/shogun-toolbox/shogun/pull/4285&#34;&gt;#4285&lt;/a&gt;&#xA;&lt;a href=&#34;https://github.com/shogun-toolbox/shogun/pull/4326&#34;&gt;#4326&lt;/a&gt;&#xA;&lt;a href=&#34;https://github.com/shogun-toolbox/shogun/pull/4339&#34;&gt;#4339&lt;/a&gt;&#xA;&lt;a href=&#34;https://github.com/shogun-toolbox/shogun/pull/4348&#34;&gt;#4348&lt;/a&gt;&#xA;&lt;a href=&#34;https://github.com/shogun-toolbox/shogun/pull/4367&#34;&gt;#4367&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;Pipeline&lt;/strong&gt;&#xA;&lt;a href=&#34;https://github.com/shogun-toolbox/shogun/pull/4317&#34;&gt;#4317&lt;/a&gt;&#xA;&lt;a href=&#34;https://github.com/shogun-toolbox/shogun/pull/4377&#34;&gt;#4377&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;Variant&lt;/strong&gt;&#xA;&lt;a href=&#34;https://github.com/shogun-toolbox/shogun/pull/4290&#34;&gt;#4290&lt;/a&gt;&#xA;&lt;a href=&#34;https://github.com/shogun-toolbox/shogun/pull/4295&#34;&gt;#4295&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;Immutable Features&lt;/strong&gt;&#xA;&lt;a href=&#34;https://github.com/shogun-toolbox/shogun/pull/4316&#34;&gt;#4316&lt;/a&gt;&#xA;&lt;a href=&#34;https://github.com/shogun-toolbox/shogun/pull/4339&#34;&gt;#4339&lt;/a&gt;&#xA;&lt;a href=&#34;https://github.com/shogun-toolbox/shogun/pull/4352&#34;&gt;#4352&lt;/a&gt;&#xA;&lt;a href=&#34;https://github.com/shogun-toolbox/shogun/pull/4365&#34;&gt;#4365&lt;/a&gt;&#xA;&lt;a href=&#34;https://github.com/shogun-toolbox/shogun/pull/4376&#34;&gt;#4376&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;Features and Labels View&lt;/strong&gt;&#xA;&lt;a href=&#34;https://github.com/shogun-toolbox/shogun/pull/4352&#34;&gt;#4352&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;Custom Exception&lt;/strong&gt;&#xA;&lt;a href=&#34;https://github.com/shogun-toolbox/shogun/pull/4331&#34;&gt;#4331&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;Notebook&lt;/strong&gt;&#xA;&lt;a href=&#34;https://github.com/shogun-toolbox/shogun/pull/4269&#34;&gt;#4269&lt;/a&gt;&#xA;&lt;a href=&#34;https://github.com/shogun-toolbox/shogun/pull/4273&#34;&gt;#4273&lt;/a&gt;&#xA;&lt;a href=&#34;https://github.com/shogun-toolbox/shogun/pull/4292&#34;&gt;#4292&lt;/a&gt;&#xA;&lt;a href=&#34;https://github.com/shogun-toolbox/shogun/pull/4302&#34;&gt;#4302&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;Cookbook&lt;/strong&gt;&#xA;&lt;a href=&#34;https://github.com/shogun-toolbox/shogun/pull/4323&#34;&gt;#4323&lt;/a&gt;&#xA;&lt;a href=&#34;https://github.com/shogun-toolbox/shogun/pull/4338&#34;&gt;#4338&lt;/a&gt;&#xA;&lt;a href=&#34;https://github.com/shogun-toolbox/shogun/pull/4366&#34;&gt;#4366&lt;/a&gt;&#xA;&lt;a href=&#34;https://github.com/shogun-toolbox/shogun/pull/4380&#34;&gt;#4380&lt;/a&gt;&#xA;&lt;a href=&#34;https://github.com/shogun-toolbox/shogun/pull/4390&#34;&gt;#4390&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;Meta Examples&lt;/strong&gt;&#xA;&lt;a href=&#34;https://github.com/shogun-toolbox/shogun/pull/4318&#34;&gt;#4318&lt;/a&gt;&#xA;&lt;a href=&#34;https://github.com/shogun-toolbox/shogun/pull/4325&#34;&gt;#4325&lt;/a&gt;&#xA;&lt;a href=&#34;https://github.com/shogun-toolbox/shogun/pull/4336&#34;&gt;#4336&lt;/a&gt;&#xA;&lt;a href=&#34;https://github.com/shogun-toolbox/shogun/pull/4338&#34;&gt;#4338&lt;/a&gt;&#xA;&lt;a href=&#34;https://github.com/shogun-toolbox/shogun/pull/4349&#34;&gt;#4349&lt;/a&gt;&#xA;&lt;a href=&#34;https://github.com/shogun-toolbox/shogun/pull/4361&#34;&gt;#4361&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;Features Factory&lt;/strong&gt;&#xA;&lt;a href=&#34;https://github.com/shogun-toolbox/shogun/pull/4345&#34;&gt;#4345&lt;/a&gt;&#xA;&lt;a href=&#34;https://github.com/shogun-toolbox/shogun/pull/4375&#34;&gt;#4375&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;Demo of Untemplated Linalg&lt;/strong&gt;&#xA;&lt;a href=&#34;https://github.com/vinx13/shogun-untemplated-demo&#34;&gt;GitHub repo&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;Misc&lt;/strong&gt;&#xA;&lt;a href=&#34;https://github.com/shogun-toolbox/shogun-gpl/pull/7&#34;&gt;#7&lt;/a&gt;&#xA;&lt;a href=&#34;https://github.com/shogun-toolbox/shogun/pull/4332&#34;&gt;#4332&lt;/a&gt;&#xA;&lt;a href=&#34;https://github.com/shogun-toolbox/shogun/pull/4372&#34;&gt;#4372&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;Shogun-data&lt;/strong&gt;&#xA;&lt;a href=&#34;https://github.com/shogun-toolbox/shogun-data/pull/155&#34;&gt;#155&lt;/a&gt;&#xA;&lt;a href=&#34;https://github.com/shogun-toolbox/shogun-data/pull/157&#34;&gt;#157&lt;/a&gt;&#xA;&lt;a href=&#34;https://github.com/shogun-toolbox/shogun-data/pull/158&#34;&gt;#158&lt;/a&gt;&#xA;&lt;a href=&#34;https://github.com/shogun-toolbox/shogun-data/pull/161&#34;&gt;#161&lt;/a&gt;&#xA;&lt;a href=&#34;https://github.com/shogun-toolbox/shogun-data/pull/162&#34;&gt;#162&lt;/a&gt;&#xA;&lt;a href=&#34;https://github.com/shogun-toolbox/shogun-data/pull/164&#34;&gt;#164&lt;/a&gt;&#xA;&lt;a href=&#34;https://github.com/shogun-toolbox/shogun-data/pull/166&#34;&gt;#166&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h3 id=&#34;blog-posts&#34;&gt;Blog posts&lt;/h3&gt;&#xA;&lt;ul class=&#34;term&#34;&gt;&#xA;    &#xA;    &lt;li&gt;&#xA;        &lt;a href=&#34;http://wuwei.io/post/2018/05/gsoc18-overview/&#34;&gt;&#xA;            GSoC&amp;#39;18: Overview&#xA;        &lt;/a&gt;&#xA;    &lt;/li&gt;&#xA;    &#xA;    &lt;li&gt;&#xA;        &lt;a href=&#34;http://wuwei.io/post/2018/05/new-transformers-in-shogun/&#34;&gt;&#xA;            New Transformers in Shogun&#xA;        &lt;/a&gt;&#xA;    &lt;/li&gt;&#xA;    &#xA;    &lt;li&gt;&#xA;        &lt;a href=&#34;http://wuwei.io/post/2018/06/some-thoughts-on-linalg/&#34;&gt;&#xA;            Some thoughts on linalg&#xA;        &lt;/a&gt;&#xA;    &lt;/li&gt;&#xA;    &#xA;    &lt;li&gt;&#xA;        &lt;a href=&#34;http://wuwei.io/post/2018/06/lazy-evaluation-with-expression-templates-1/&#34;&gt;&#xA;            Lazy Evaluation with Expression Templates (1)&#xA;        &lt;/a&gt;&#xA;    &lt;/li&gt;&#xA;    &#xA;    &lt;li&gt;&#xA;        &lt;a href=&#34;http://wuwei.io/post/2018/07/lazy-evaluation-with-expression-templates-2/&#34;&gt;&#xA;            Lazy Evaluation with Expression Templates (2)&#xA;        &lt;/a&gt;&#xA;    &lt;/li&gt;&#xA;    &#xA;    &lt;li&gt;&#xA;        &lt;a href=&#34;http://wuwei.io/post/2018/07/bringing-features-and-labels-views-to-shogun/&#34;&gt;&#xA;            Bringing features and labels views to Shogun&#xA;        &lt;/a&gt;&#xA;    &lt;/li&gt;&#xA;    &#xA;    &lt;li&gt;&#xA;        &lt;a href=&#34;http://wuwei.io/post/2018/08/gsoc18-final-review/&#34;&gt;&#xA;            GSoC&amp;#39;18: Final Review&#xA;        &lt;/a&gt;&#xA;    &lt;/li&gt;&#xA;    &#xA;    &lt;li&gt;&#xA;        &lt;a href=&#34;http://wuwei.io/post/2018/08/gsoc18-summary-page/&#34;&gt;&#xA;            GSoC&amp;#39;18: Summary Page&#xA;        &lt;/a&gt;&#xA;    &lt;/li&gt;&#xA;    &#xA;    &lt;li&gt;&#xA;        &lt;a href=&#34;http://wuwei.io/post/2018/08/gsoc18-peer-review-for-inside-the-black-box/&#34;&gt;&#xA;            GSoC&amp;#39;18: Peer Review for Inside the Black Box&#xA;        &lt;/a&gt;&#xA;    &lt;/li&gt;&#xA;    &#xA;&lt;/ul&gt;&#xA;&#xA;&lt;h3 id=&#34;timeline&#34;&gt;Timeline&lt;/h3&gt;&#xA;&lt;p&gt;Week1 - Week2 : Transformer        &lt;br&gt;&#xA;Week3 - Week4 : Pipeline, Custom Exceptions        &lt;br&gt;&#xA;Week4 - Week7 : Untemplated linalg&lt;br&gt;&#xA;Week8 - Week9 : Features and Labels View&lt;br&gt;&#xA;Week10 - Week12: Pipeline Cross Validation, Cleanup for Immutable Features&lt;br&gt;&#xA;Week12 - Week13: Blog Posts, Peer Review&lt;/p&gt;</description>
    </item>
    <item>
      <title>Bringing features and labels views to Shogun</title>
      <link>http://wuwei.io/post/2018/07/bringing-features-and-labels-views-to-shogun/</link>
      <pubDate>Sat, 28 Jul 2018 00:00:00 +0000</pubDate>
      <guid>http://wuwei.io/post/2018/07/bringing-features-and-labels-views-to-shogun/</guid>
      <description>&lt;p&gt;This week I&amp;rsquo;m happy to introduce the new thing to Shogun, features and labels view.&#xA;In machine learning, operating on a subset of features or labels is usual, especially in recursive tree algorithms.&#xA;The view, is a new instance of &lt;code&gt;CFeatures&lt;/code&gt; or &lt;code&gt;CLabels&lt;/code&gt;, or their subclasses, with a subset of data shared with the original instance.&#xA;It is implemented as a global template function that accept a pointer or a small pointer to a viewable instance, and an index vector as arguments.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Lazy Evaluation with Expression Templates (2)</title>
      <link>http://wuwei.io/post/2018/07/lazy-evaluation-with-expression-templates-2/</link>
      <pubDate>Thu, 05 Jul 2018 00:00:00 +0000</pubDate>
      <guid>http://wuwei.io/post/2018/07/lazy-evaluation-with-expression-templates-2/</guid>
      <description>&lt;p&gt;&lt;strong&gt;Progress so far&lt;/strong&gt;&lt;br&gt;&#xA;Previously we have implemented lazy expressions using expression template. With expression APIs, we could seamlessly use expressions as vector and matrix.&#xA;For example,&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Vector a, b;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;auto&lt;/span&gt; c &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; add(a, b);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Vector d &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; add(a, c);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In this example we create a addition expression of a and b, and then call &lt;code&gt;add&lt;/code&gt; with an expression and a vector.&#xA;In the second &lt;code&gt;add&lt;/code&gt; expression, the argument &lt;code&gt;c&lt;/code&gt;, which is a &lt;code&gt;Vector&lt;/code&gt;, will be converted to a &lt;code&gt;VectorRefExp&lt;/code&gt;.&#xA;Therefore, we can pass either plain data type &lt;code&gt;Vector&lt;/code&gt;, &lt;code&gt;Matrix&lt;/code&gt;, or expressions as arguments and we only need to deal with are expressions since we have implicit conversion from &lt;code&gt;Vector&lt;/code&gt; and &lt;code&gt;Matrix&lt;/code&gt;.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Lazy Evaluation with Expression Templates (1)</title>
      <link>http://wuwei.io/post/2018/06/lazy-evaluation-with-expression-templates-1/</link>
      <pubDate>Tue, 26 Jun 2018 00:00:00 +0000</pubDate>
      <guid>http://wuwei.io/post/2018/06/lazy-evaluation-with-expression-templates-1/</guid>
      <description>&lt;p&gt;In last post I talked about the ongoing refactor of linalg.&#xA;So we are going to have untemplated vector and matrix types, using a void pointer and checking type information in runtime.&#xA;Say you have some vectors and do some computations like&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Vector a, b, c;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;c &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; add(add(a, b), c);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;A simple idea is to switch over element types of vectors and call templated routine &lt;code&gt;linalg::add&amp;lt;T&amp;gt;&lt;/code&gt;.&#xA;In this way we will have to switch every time, over each expression involved, e.g, a, b, c and a+b.&#xA;This is not desirable not only for runtime overhead but also much boilerplate code we will have to add.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Some thoughts on linalg</title>
      <link>http://wuwei.io/post/2018/06/some-thoughts-on-linalg/</link>
      <pubDate>Fri, 08 Jun 2018 00:00:00 +0000</pubDate>
      <guid>http://wuwei.io/post/2018/06/some-thoughts-on-linalg/</guid>
      <description>&lt;p&gt;So in the next two weeks I&amp;rsquo;m going to work on refactoring linalg of Shogun.&#xA;The data types in Shogun, &lt;code&gt;SGVector&amp;lt;T&amp;gt;&lt;/code&gt;, &lt;code&gt;SGMatrix&amp;lt;T&amp;gt;&lt;/code&gt; are templated classes which maintain a piece of memory in either CPU or GPU and provide basic operations like array-like element access.&#xA;&lt;code&gt;linalg::&lt;/code&gt;, is the upper level module working with &lt;code&gt;SGVector&lt;/code&gt;, &lt;code&gt;SGMatrix&lt;/code&gt;, providing linalg algebra operations, like matrix additions / multiplications.&lt;/p&gt;&#xA;&lt;p&gt;Though &lt;code&gt;SGVector&lt;/code&gt; and &lt;code&gt;SGMatrix&lt;/code&gt;, as template classes, are capable to represent different data types (&lt;code&gt;float32_t&lt;/code&gt;, &lt;code&gt;float64_t&lt;/code&gt;, etc.), most algorithms in Shogun actually do not behave generically.&#xA;They accept &lt;code&gt;CFeatures*&lt;/code&gt; as input but later expect them to be dense features with &lt;code&gt;float64_t&lt;/code&gt; element type. This is most of the cases in Shogun.&lt;/p&gt;</description>
    </item>
    <item>
      <title>New Transformers in Shogun</title>
      <link>http://wuwei.io/post/2018/05/new-transformers-in-shogun/</link>
      <pubDate>Sun, 27 May 2018 00:00:00 +0000</pubDate>
      <guid>http://wuwei.io/post/2018/05/new-transformers-in-shogun/</guid>
      <description>&lt;p&gt;The first two weeks of GSoC have ended. Here I will share my progress so far.&lt;/p&gt;&#xA;&lt;p&gt;In the first two weeks, I have been mostly working on the new transformer class, &lt;code&gt;CTransformer&lt;/code&gt;. It is introduced mainly for two purposes: 1) Providing generic and unified interface for data transformation. 2) Make features immutable.&lt;/p&gt;&#xA;&lt;p&gt;In Shogun, we have preprocessors and converters, both operating on features and applying some transformations. The major distinction between them I think is that preprocessors support on-the-fly evaluation: we can add several preprocessors by &lt;code&gt;add_preprocessor&lt;/code&gt; and then apply them when calling &lt;code&gt;get_feature_vector&lt;/code&gt;. Other than that, they mostly do the same thing. So it would be good if they provide unified interface. The story is, in machine learning, we always work with either features or labels, that everything can be fit or transform. To this end, transformers are introduced as an abstraction of of converters and preprocessors with two-staged API: fit + transform.&lt;/p&gt;</description>
    </item>
    <item>
      <title>GSoC&#39;18: Overview</title>
      <link>http://wuwei.io/post/2018/05/gsoc18-overview/</link>
      <pubDate>Sat, 05 May 2018 00:00:00 +0000</pubDate>
      <guid>http://wuwei.io/post/2018/05/gsoc18-overview/</guid>
      <description>&lt;p&gt;Projects of GSoC&#39;18 were announced last week and I am happy that I will be working on &lt;a href=&#34;http://shogun.ml&#34;&gt;Shogun&lt;/a&gt; over this summer. In this post, I am pleased to share some details of my project.&lt;/p&gt;&#xA;&lt;p&gt;Shogun is a versatile machine learning toolbox that offers a bunch of convinent and unified algorithm implementations. Written in C++ and providing interface in different languages via SWIG, it is a great place to hack.&lt;/p&gt;&#xA;&lt;p&gt;My project, &lt;a href=&#34;https://summerofcode.withgoogle.com/projects/#6031654070517760&#34;&gt;Continuous Detoxification&lt;/a&gt;, will focus on redesigning and refactoring, aiming at modernizing Shogun&amp;rsquo;s codebase and improving experience for both users and developers. As a project lasting for more than ten years, some parts of Shogun are old and not well-designed. For example, parallel cross validation is not thread safe because features are modified in some algorithms and thus cannot be shared. So, as the first part of my project, I would like to make features immutable. There are several blockers that need to be addressed first. Algorithms that rely on mutation of features will be refactored and preprocessors which are coupled with features need to be redesigned as well. Besides, views of features and labels will be introduced to enable sharing underlying data between features or labels. Some other parts will be taken care as well for thread safety. After we have immutable features, we can safely enable parallel cross validation.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
